"""
R√¥le global :
Ce module est con√ßu pour automatiser l'envoi hebdomadaire des rapports g√©n√©r√©s par le pipeline de scraping et d'analyse. 
Il utilise le protocole SMTP pour envoyer des emails contenant les rapports en pi√®ce jointe √† une liste de destinataires.

Pourquoi il est important :
Dans le pipeline global (scraping ‚Üí analyse ‚Üí visualisation ‚Üí rapport), ce module joue un r√¥le cl√© en automatisant 
la distribution des livrables finaux. Cela garantit que les parties prenantes re√ßoivent les rapports √† temps, sans intervention manuelle. 
Il am√©liore √©galement la communication et la collaboration en rendant les r√©sultats accessibles √† l'√©quipe ou aux clients.

Comment il aide dans le pipeline :
- **Scraping** : Compile les rapports g√©n√©r√©s √† partir des donn√©es extraites.
- **Analyse** : Partage les r√©sultats des analyses avec les parties prenantes.
- **Visualisation** : Distribue les rapports contenant des visualisations et des insights.
- **Rapport** : Automatise l'envoi des rapports finaux, r√©duisant ainsi les t√¢ches manuelles.

Technologies utilis√©es :
- **smtplib** : Pour g√©rer la connexion au serveur SMTP et envoyer les emails.
- **email.mime** : Pour cr√©er des emails avec des pi√®ces jointes et un contenu HTML.
- **schedule** : Pour planifier l'envoi automatique des emails √† une heure pr√©cise.
- **datetime** : Pour inclure la date dans le sujet et le corps de l'email.
- **os** : Pour v√©rifier l'existence des fichiers √† joindre.
"""

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import os
import schedule
import time
from datetime import datetime

def send_report_email():
    """
    R√¥le :
    Envoie un email contenant les rapports hebdomadaires en pi√®ce jointe.

    Fonctionnalit√© :
    - Configure la connexion au serveur SMTP.
    - Cr√©e un email avec un contenu HTML et des pi√®ces jointes.
    - Envoie l'email √† une liste de destinataires.

    Importance :
    Cette fonction garantit que les rapports g√©n√©r√©s sont envoy√©s automatiquement aux destinataires, 
    r√©duisant ainsi les t√¢ches manuelles et assurant une communication r√©guli√®re.

    √âtapes :
    1. Configure les param√®tres SMTP (serveur, port, email exp√©diteur).
    2. Cr√©e un email avec un sujet, un corps HTML et des pi√®ces jointes.
    3. Envoie l'email via le serveur SMTP.

    Arguments :
    Aucun argument direct. Les param√®tres (email exp√©diteur, destinataires, fichiers joints) sont d√©finis dans le code.

    Retour :
    Aucun retour. Affiche un message de succ√®s ou d'erreur dans la console.
    """
    # Configuration SMTP
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    sender_email = "ikram.khemiri@ensi-uma.tn"
    sender_password = "jiwz nniy jukp hcbq"  # √Ä remplacer par os.getenv() en production
    recipient_emails = ["ikramkhemiri416@gmail.com"]

    # Cr√©ation du message
    msg = MIMEMultipart()
    msg["From"] = f"Ikram Khemiri <{sender_email}>"
    msg["To"] = ", ".join(recipient_emails)
    msg["Subject"] = f"Rapport Hebdomadaire NaviTrends - {datetime.now().strftime('%d/%m/%Y')}"

    # Corps du mail
    email_body = f"""
    <p>Bonjour l'√©quipe NaviTrends,</p>
    <p>Veuillez trouver ci-joint les rapports du {datetime.now().strftime('%d/%m/%Y')} :</p>
    <ul>
        <li><strong>rapport_sites.pdf</strong> : Donn√©es brutes</li>
        <li><strong>rapport_entreprises.pdf</strong> : Donn√©es nettoy√©es</li>
        <li><strong>rapport_final.pdf</strong> : Analyse compl√®te</li>
    </ul>
    <p>Cordialement,<br>Ikram Khemiri</p>
    """
    msg.attach(MIMEText(email_body, "html"))

    # Pi√®ces jointes
    for file in ["rapport_sites.pdf", "rapport_entreprises.pdf", "rapport_final.pdf"]:
        try:
            with open(file, "rb") as f:
                part = MIMEApplication(f.read(), Name=file)
                part["Content-Disposition"] = f'attachment; filename="{file}"'
                msg.attach(part)
        except FileNotFoundError:
            print(f"‚ö† Fichier {file} manquant")

    # Envoi
    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, recipient_emails, msg.as_string())
        print(f"‚úÖ Rapport envoy√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
    except Exception as e:
        print(f"‚ùå Erreur : {e}")

# Planification
"""
R√¥le :
Planifie l'envoi automatique des emails chaque lundi √† 9h.

Importance :
Cette section garantit que les rapports sont envoy√©s r√©guli√®rement sans intervention manuelle.

Technologies utilis√©es :
- **schedule** : Pour planifier l'ex√©cution de la fonction `send_report_email`.
"""
schedule.every().monday.at("09:00").do(send_report_email)

print("üïí Programme d√©marr√© - Envoi automatique configur√© (Lundi 9h)")

# Boucle principale
"""
R√¥le :
Ex√©cute la planification en v√©rifiant r√©guli√®rement les t√¢ches √† ex√©cuter.

Importance :
Cette boucle garantit que la fonction `send_report_email` est ex√©cut√©e √† l'heure pr√©vue.

Technologies utilis√©es :
- **time.sleep** : Pour r√©duire la charge CPU en v√©rifiant les t√¢ches toutes les minutes.
"""
while True:
    schedule.run_pending()
    time.sleep(60)  # V√©rifie toutes les minutes
