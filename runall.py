"""
R√¥le global :
Ce module orchestre l'ex√©cution compl√®te du pipeline de traitement, allant du scraping des donn√©es √† leur analyse, 
visualisation et envoi des rapports. Il ex√©cute chaque √©tape dans l'ordre, v√©rifie les pr√©requis, et g√®re les erreurs 
pour garantir une ex√©cution fluide et coh√©rente.

Pourquoi il est important :
Dans le pipeline global (scraping ‚Üí analyse ‚Üí visualisation ‚Üí rapport), ce module est essentiel car il automatise 
l'ensemble du processus. Il permet de s'assurer que toutes les √©tapes sont ex√©cut√©es correctement, dans le bon ordre, 
et que les r√©sultats finaux sont pr√™ts √† √™tre partag√©s. Cela r√©duit les interventions manuelles et garantit une efficacit√© maximale.

Comment il aide dans le pipeline :
- **Scraping** : Lance le script de scraping pour collecter les donn√©es.
- **Analyse** : Ex√©cute les scripts de nettoyage et d'analyse pour structurer et enrichir les donn√©es.
- **Visualisation** : G√©n√®re des visualisations et des rapports PDF.
- **Rapport** : Automatise l'envoi des rapports finaux par email.

Technologies utilis√©es :
- **Subprocess** : Pour ex√©cuter les scripts Python externes et capturer leurs sorties.
- **Logging** : Pour suivre l'ex√©cution du pipeline et enregistrer les erreurs ou succ√®s.
- **OS** : Pour v√©rifier l'existence des fichiers requis.
- **Datetime** : Pour inclure des informations temporelles dans les logs.
"""

import os
import subprocess
import time
import logging
from datetime import datetime

# Configuration du logging
"""
R√¥le :
Configure le syst√®me de journalisation pour enregistrer les √©v√©nements importants, les erreurs et les succ√®s.

Importance :
Permet de suivre l'ex√©cution du pipeline, d'identifier les probl√®mes rapidement et de conserver un historique des ex√©cutions.

Technologies utilis√©es :
- **Logging** : Pour enregistrer les √©v√©nements dans un fichier et les afficher dans la console.
"""
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('pipeline.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Liste des scripts √† ex√©cuter dans l'ordre
SCRIPTS = [
    "multi_scraper.py",
    "nettoyage_base.py", 
    "json_to_pdf.py",
    "nlp_tfidf_visualisation.py",
    "dashboard.py",
    "envoi_mail.py"
]

# Fichiers requis pour valider l'environnement
REQUIRED_FILES = {
    "rapport_sites.pdf": "G√©n√©r√© par multi_scraper.py",
    "rapport_entreprises.pdf": "G√©n√©r√© par json_to_pdf.py",
    "rapport_final.pdf": "G√©n√©r√© par nlp_tfidf_visualisation.py"
}

def validate_environment():
    """
    R√¥le :
    V√©rifie que tous les fichiers requis pour le pipeline existent.

    Fonctionnalit√© :
    - Parcourt la liste des fichiers requis.
    - V√©rifie leur existence sur le disque.
    - Affiche un message d'erreur si des fichiers sont manquants.

    Importance :
    Garantit que le pipeline dispose des fichiers n√©cessaires pour fonctionner correctement.

    Retour :
    `True` si tous les fichiers requis sont pr√©sents, sinon `False`.
    """
    missing = []
    for file, source in REQUIRED_FILES.items():
        if not os.path.exists(file):
            missing.append(f"{file} ({source})")
    
    if missing:
        logger.error("‚ùå Fichiers manquants :\n" + "\n".join(missing))
        return False
    return True

def run_script(script_name):
    """
    R√¥le :
    Ex√©cute un script Python en tant que sous-processus.

    Fonctionnalit√© :
    - Lance le script avec `subprocess.run`.
    - Capture la sortie standard et les erreurs.
    - Enregistre les r√©sultats dans les logs.

    Importance :
    Permet d'ex√©cuter chaque √©tape du pipeline de mani√®re isol√©e, avec une gestion robuste des erreurs.

    Arguments :
    - `script_name` : Le nom du script √† ex√©cuter.

    Retour :
    `True` si le script s'ex√©cute avec succ√®s, sinon `False`.
    """
    logger.info(f"üöÄ Lancement de {script_name}...")
    start_time = time.time()
    
    try:
        result = subprocess.run(
            ["python", script_name],
            check=True,
            capture_output=True,
            text=True
        )
        
        # Journalisation de la sortie
        if result.stdout:
            logger.debug(f"Sortie de {script_name}:\n{result.stdout}")
        
        duration = time.time() - start_time
        logger.info(f"‚úÖ {script_name} termin√© avec succ√®s (en {duration:.2f}s)")
        return True
        
    except subprocess.CalledProcessError as e:
        duration = time.time() - start_time
        logger.error(f"‚ùå Erreur dans {script_name} (apr√®s {duration:.2f}s):")
        logger.error(f"Code sortie: {e.returncode}")
        logger.error(f"Erreur:\n{e.stderr}")
        return False

def main():
    """
    R√¥le :
    Point d'entr√©e principal pour ex√©cuter le pipeline complet.

    Fonctionnalit√© :
    - Valide l'environnement en v√©rifiant les fichiers requis.
    - Ex√©cute chaque script dans l'ordre d√©fini.
    - G√®re les erreurs et interrompt le pipeline si un script √©choue.

    Importance :
    Ordonne et supervise l'ex√©cution de toutes les √©tapes du pipeline, garantissant une ex√©cution fluide et coh√©rente.

    √âtapes :
    1. Valide l'environnement.
    2. Ex√©cute les scripts un par un.
    3. Enregistre les r√©sultats dans les logs.

    Retour :
    Aucun retour. Les r√©sultats sont affich√©s dans la console et enregistr√©s dans les logs.
    """
    logger.info("="*60)
    logger.info(f"üîÑ D√©but du pipeline le {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    logger.info("="*60)
    
    if not validate_environment():
        return
    
    for script in SCRIPTS:
        success = run_script(script)
        if not success:
            logger.error(f"‚õî Pipeline interrompu - {script} a √©chou√©")
            return
        
        # Pause entre les scripts pour √©viter les conflits
        time.sleep(2)
    
    logger.info("="*60)
    logger.info(f"üèÅ Pipeline termin√© avec succ√®s le {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    logger.info("="*60)

if __name__ == "__main__":
    main()
