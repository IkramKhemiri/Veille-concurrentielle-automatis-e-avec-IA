"""
R√¥le global :
Ce module utilise un mod√®le de traitement du langage naturel (NLP), mT5, pour g√©n√©rer automatiquement des introductions et des r√©sum√©s 
√† partir de blocs textuels. Il est con√ßu pour reformuler et synth√©tiser des informations de mani√®re concise et professionnelle.

Pourquoi il est important :
Dans le pipeline global (scraping ‚Üí analyse ‚Üí visualisation ‚Üí rapport), ce module joue un r√¥le cl√© en transformant des donn√©es textuelles 
brutes en r√©sum√©s clairs et exploitables. Ces r√©sum√©s permettent de pr√©senter les informations de mani√®re concise et professionnelle, 
ce qui est essentiel pour les rapports ou les visualisations. Sans cette √©tape, les donn√©es textuelles pourraient √™tre trop longues ou d√©sorganis√©es 
pour √™tre directement utilis√©es.

Comment il aide dans le pipeline :
- **Scraping** : Les donn√©es textuelles extraites sont souvent volumineuses et non synth√©tis√©es.
- **Analyse** : Ce module reformule et r√©sume ces donn√©es pour les rendre plus compr√©hensibles.
- **Visualisation** : Les introductions et r√©sum√©s g√©n√©r√©s peuvent √™tre utilis√©s comme descriptions dans des graphiques ou tableaux.
- **Rapport** : Les r√©sum√©s permettent de pr√©senter les informations de mani√®re concise et professionnelle dans les rapports finaux.

Technologies utilis√©es :
- **Transformers (mT5)** : Un mod√®le NLP multilingue de Google, utilis√© pour la g√©n√©ration de texte.
- **PyTorch** : Utilis√© pour charger et ex√©cuter le mod√®le mT5.
- **Logging** : Pour suivre les erreurs et les √©tapes de chargement du mod√®le.
"""

import logging
from transformers import MT5ForConditionalGeneration, MT5Tokenizer
import torch

# Chargement global du mod√®le
_model = None
_tokenizer = None

# Fonction pour charger le mod√®le mT5
def _load_mt5():
    """
    R√¥le :
    Cette fonction charge le mod√®le mT5 et son tokenizer en m√©moire. Elle s'assure que le mod√®le est charg√© une seule fois 
    pour √©viter des rechargements inutiles.

    Fonctionnalit√© :
    - Charge le tokenizer mT5 pour pr√©parer les donn√©es textuelles.
    - Charge le mod√®le mT5 pour la g√©n√©ration de texte.

    Importance :
    Le chargement du mod√®le est une √©tape essentielle pour permettre la g√©n√©ration de r√©sum√©s et d'introductions. 
    En le chargeant globalement, on optimise les performances en √©vitant des rechargements r√©p√©titifs.
    """
    global _model, _tokenizer
    if _model is None or _tokenizer is None:
        logging.info("üì¶ Chargement du mod√®le mT5 pour g√©n√©ration...")
        _tokenizer = MT5Tokenizer.from_pretrained("google/mt5-small")
        _model = MT5ForConditionalGeneration.from_pretrained("google/mt5-small")

# Fonction g√©n√©rique pour g√©n√©rer du texte avec mT5
def _generate_mt5_prompt(prompt, blocs_textuels, min_length=30, max_length=100):
    """
    R√¥le :
    Cette fonction g√©n√®re un texte bas√© sur un prompt donn√© et des blocs textuels en entr√©e. Elle utilise le mod√®le mT5 
    pour produire une sortie coh√©rente et concise.

    Fonctionnalit√© :
    - Combine les blocs textuels en une seule cha√Æne.
    - Pr√©pare les donn√©es pour le mod√®le mT5 en utilisant le tokenizer.
    - G√©n√®re un texte en respectant les contraintes de longueur minimale et maximale.
    - G√®re les erreurs √©ventuelles lors de la g√©n√©ration.

    Importance :
    Cette fonction est le moteur principal de la g√©n√©ration de texte. Elle permet de produire des introductions et des r√©sum√©s 
de mani√®re flexible et r√©utilisable.

    Arguments :
    - `prompt` : Une instruction qui guide la g√©n√©ration (par exemple, "Pr√©sente l'entreprise...").
    - `blocs_textuels` : Une liste de textes √† utiliser comme base pour la g√©n√©ration.
    - `min_length` : Longueur minimale du texte g√©n√©r√©.
    - `max_length` : Longueur maximale du texte g√©n√©r√©.

    Retour :
    Une cha√Æne de caract√®res contenant le texte g√©n√©r√© ou un message d'erreur si la g√©n√©ration √©choue.
    """
    try:
        _load_mt5()  # Charger le mod√®le si ce n'est pas d√©j√† fait
        texte = "\n".join([str(x).strip() for x in blocs_textuels if x]).strip()

        if not texte or len(texte.split()) < 10:  # V√©rifier si le texte est suffisant pour la g√©n√©ration
            return "Texte insuffisant."

        # Pr√©parer le prompt complet
        full_prompt = f"{prompt} : {texte}"
        inputs = _tokenizer(full_prompt, return_tensors="pt", max_length=512, truncation=True)
        output = _model.generate(
            inputs["input_ids"],
            max_length=max_length,
            min_length=min_length,
            num_beams=4,  # Utilisation de beam search pour am√©liorer la qualit√©
            early_stopping=True
        )
        return _tokenizer.decode(output[0], skip_special_tokens=True)  # D√©coder la sortie en texte lisible
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Erreur g√©n√©ration mT5 : {e}")
        return "G√©n√©ration non disponible."

# Fonction pour g√©n√©rer une introduction
def generer_introduction_mt5(blocs_textuels):
    """
    R√¥le :
    G√©n√®re une introduction professionnelle et concise √† partir des blocs textuels fournis.

    Fonctionnalit√© :
    - Utilise un prompt sp√©cifique pour guider la g√©n√©ration ("Pr√©sente l'entreprise...").
    - Produit un texte d'introduction clair et structur√©.

    Importance :
    Une introduction bien r√©dig√©e est essentielle pour pr√©senter une entreprise de mani√®re professionnelle, 
    que ce soit dans un rapport ou une visualisation.

    Arguments :
    - `blocs_textuels` : Une liste de textes √† utiliser comme base pour la g√©n√©ration.

    Retour :
    Une cha√Æne de caract√®res contenant l'introduction g√©n√©r√©e.
    """
    return _generate_mt5_prompt(
        "Pr√©sente l'entreprise de fa√ßon professionnelle et concise",
        blocs_textuels,
        min_length=40,
        max_length=100
    )

# Fonction pour g√©n√©rer un r√©sum√© final
def generer_resume_final_mt5(blocs_textuels):
    """
    R√¥le :
    G√©n√®re une conclusion ou un r√©sum√© global √† partir des blocs textuels fournis.

    Fonctionnalit√© :
    - Utilise un prompt sp√©cifique pour guider la g√©n√©ration ("Fais une conclusion globale...").
    - Produit un texte de synth√®se qui r√©sume les informations principales.

    Importance :
    Un r√©sum√© final permet de conclure un rapport ou une analyse de mani√®re claire et concise, 
    en mettant en avant les points essentiels.

    Arguments :
    - `blocs_textuels` : Une liste de textes √† utiliser comme base pour la g√©n√©ration.

    Retour :
    Une cha√Æne de caract√®res contenant le r√©sum√© final g√©n√©r√©.
    """
    return _generate_mt5_prompt(
        "Fais une conclusion globale sur cette entreprise √† partir des informations donn√©es",
        blocs_textuels,
        min_length=40,
        max_length=100
    )
