# scraping/crawler.py

import logging
from utils.detection import is_static_site
from scraping.scraper_static import scrape_static_site
from scraping.scraper_dynamic import scrape_dynamic_site
from analyse.analyseur_semantique import analyse_semantique

def crawl_site(url):
    """
    Scrape un site (statique ou dynamique) et effectue une analyse s√©mantique.
    Retourne un dictionnaire structur√©.
    """
    try:
        is_static = is_static_site(url)
        logging.info(f"üîç D√©tection du type de site : {'statique' if is_static else 'dynamique'}")
        data = scrape_static_site(url) if is_static else scrape_dynamic_site(url)
        if not data:
            logging.warning(f"‚ö†Ô∏è Aucune donn√©e extraite de {url}")
            return {"name": url, "url": url, "summary": "R√©sum√© non disponible."}

        # Analyse s√©mantique sur blocs HTML (si pr√©sents)
        raw_blocks = data.get("raw_blocks", [])
        analyse = analyse_semantique(raw_blocks, url)

        return {"name": data.get("name", url), "url": url, **analyse}

    except Exception as e:
        logging.error(f"‚ùå Erreur dans crawl_site pour {url}: {str(e)}")
        return {"name": url, "url": url, "summary": "R√©sum√© non disponible."}
