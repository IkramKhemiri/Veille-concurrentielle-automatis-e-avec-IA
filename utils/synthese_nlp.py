"""
R√¥le global :
Ce module est con√ßu pour produire une synth√®se globale des r√©sultats d'analyse NLP (Natural Language Processing) 
appliqu√©s aux sites web. Il calcule des scores pour chaque site, analyse les langues d√©tect√©es, identifie les mots-cl√©s 
les plus fr√©quents, et g√©n√®re un r√©sum√© global des donn√©es.

Pourquoi il est important :
Dans le pipeline global (scraping ‚Üí analyse ‚Üí visualisation ‚Üí rapport), ce module joue un r√¥le cl√© en consolidant 
les r√©sultats d'analyse NLP. Il fournit une vue d'ensemble des donn√©es, ce qui est essentiel pour √©valuer la qualit√© 
et la pertinence des informations extraites. Cette synth√®se permet √©galement de prioriser les sites en fonction de leur score.

Comment il aide dans le pipeline :
- **Scraping** : Compile les donn√©es extraites pour les rendre exploitables.
- **Analyse** : Fournit des statistiques globales sur les langues, les mots-cl√©s et les scores des sites.
- **Visualisation** : G√©n√®re des donn√©es synth√©tiques qui peuvent √™tre utilis√©es pour des graphiques ou des tableaux.
- **Rapport** : Produit un r√©sum√© clair et structur√© qui peut √™tre int√©gr√© dans des rapports professionnels.

Technologies utilis√©es :
- **JSON** : Pour charger et sauvegarder les donn√©es structur√©es.
- **Collections (Counter)** : Pour compter les occurrences des langues et des mots-cl√©s.
- **Pathlib** : Pour v√©rifier l'existence des fichiers.
"""

import json
from collections import Counter, defaultdict
from pathlib import Path

def charger_donnees(chemin):
    """
    R√¥le :
    Charge les donn√©es JSON contenant les r√©sultats d'analyse NLP.

    Fonctionnalit√© :
    - Lit un fichier JSON et retourne les donn√©es sous forme de liste ou de dictionnaire.

    Importance :
    Cette fonction est essentielle pour r√©cup√©rer les donn√©es n√©cessaires √† la synth√®se globale.

    Arguments :
    - `chemin` : Le chemin du fichier JSON √† charger.

    Retour :
    Les donn√©es JSON sous forme de liste ou de dictionnaire.
    """
    with open(chemin, encoding='utf-8') as f:
        return json.load(f)

def calculer_score(site):
    """
    R√¥le :
    Calcule un score global pour un site en fonction de plusieurs crit√®res.

    Fonctionnalit√© :
    - Attribue des points en fonction de la pr√©sence de mots-cl√©s, de lemmes, d'un r√©sum√©, de la langue d√©tect√©e, 
      et du nombre de tokens.
    - Limite le score maximum √† 10.

    Importance :
    Cette fonction permet de quantifier la qualit√© et la richesse des donn√©es extraites pour chaque site.

    Arguments :
    - `site` : Un dictionnaire contenant les donn√©es d'un site.

    Retour :
    Un entier repr√©sentant le score du site (entre 0 et 10).
    """
    score = 0
    if len(site.get("keywords", [])) > 3:
        score += 3
    if len(site.get("lemmes", [])) > 5:
        score += 2
    if site.get("summary"):
        score += 2
    if site.get("lang") in ["fr", "en"]:
        score += 1
    if len(site.get("tokens", [])) > 20:
        score += 2
    return min(score, 10)

def synthese_globale(sites):
    """
    R√¥le :
    Produit une synth√®se globale des r√©sultats d'analyse NLP pour tous les sites.

    Fonctionnalit√© :
    - Compte les langues d√©tect√©es.
    - Identifie les mots-cl√©s les plus fr√©quents.
    - Calcule les scores pour chaque site et g√©n√®re des statistiques globales (moyenne, maximum, minimum).

    Importance :
    Cette fonction fournit une vue d'ensemble des donn√©es, permettant d'√©valuer la qualit√© des r√©sultats et de 
    prioriser les sites en fonction de leur pertinence.

    Arguments :
    - `sites` : Une liste de dictionnaires contenant les donn√©es des sites.

    Retour :
    Un dictionnaire contenant la synth√®se globale (nombre de sites, langues d√©tect√©es, top mots-cl√©s, scores).
    """
    langues = Counter()
    mots_cles = Counter()
    scores = []

    for site in sites:
        lang = site.get("lang", "unk")
        langues[lang] += 1

        mots_cles.update(site.get("keywords", []))

        score = calculer_score(site)
        site["score"] = score
        scores.append(score)

    synthese = {
        "nombre_sites": len(sites),
        "langues_detectees": dict(langues),
        "top_keywords": [kw for kw, _ in mots_cles.most_common(15)],
        "score_moyen": round(sum(scores) / len(scores), 2) if scores else 0,
        "score_max": max(scores, default=0),
        "score_min": min(scores, default=0)
    }

    return synthese

def enregistrer_synthese(sites, resume, output_path):
    """
    R√¥le :
    Sauvegarde la synth√®se globale et les donn√©es des sites dans un fichier JSON.

    Fonctionnalit√© :
    - Combine la synth√®se globale et les donn√©es des sites dans un seul fichier.
    - √âcrit les r√©sultats dans un fichier JSON avec une indentation pour une meilleure lisibilit√©.

    Importance :
    Cette fonction garantit que les r√©sultats de la synth√®se sont sauvegard√©s de mani√®re fiable et r√©utilisable.

    Arguments :
    - `sites` : Une liste de dictionnaires contenant les donn√©es des sites.
    - `resume` : Un dictionnaire contenant la synth√®se globale.
    - `output_path` : Le chemin du fichier JSON de sortie.

    Retour :
    Aucun retour. Les r√©sultats sont sauvegard√©s dans le fichier sp√©cifi√©.
    """
    resultats = {
        "synthese_globale": resume,
        "sites": sites
    }
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(resultats, f, indent=2, ensure_ascii=False)

def main():
    """
    R√¥le :
    Point d'entr√©e principal pour g√©n√©rer la synth√®se globale des r√©sultats d'analyse NLP.

    Fonctionnalit√© :
    - V√©rifie l'existence du fichier JSON contenant les r√©sultats d'analyse.
    - Charge les donn√©es JSON.
    - Produit une synth√®se globale des r√©sultats.
    - Sauvegarde la synth√®se et les donn√©es dans un nouveau fichier JSON.

    Importance :
    Cette fonction orchestre l'ensemble du processus de synth√®se, garantissant que les r√©sultats sont consolid√©s 
    et sauvegard√©s pour une utilisation ult√©rieure.

    √âtapes :
    1. V√©rifie si le fichier `resultats_analyse.json` existe.
    2. Charge les donn√©es JSON.
    3. Calcule la synth√®se globale.
    4. Sauvegarde les r√©sultats dans `synthese_resultats.json`.

    Arguments :
    Aucun argument direct. Les chemins des fichiers d'entr√©e et de sortie sont d√©finis dans le code.

    Retour :
    Aucun retour. Les r√©sultats sont affich√©s dans la console.
    """
    print("üìä Analyse NLP ‚ûù Synth√®se globale & scoring ...")
    input_path = "resultats_analyse.json"
    output_path = "synthese_resultats.json"

    if not Path(input_path).exists():
        print("‚ùå Fichier resultats_analyse.json introuvable.")
        return

    data = charger_donnees(input_path)
    resume = synthese_globale(data)
    enregistrer_synthese(data, resume, output_path)

    print("‚úÖ R√©sum√© synth√©tique sauvegard√© dans : synthese_resultats.json")
    print(f"\nR√©sum√© rapide :\n- Sites : {resume['nombre_sites']}\n- Moyenne Score : {resume['score_moyen']}/10\n- Langues : {resume['langues_detectees']}")
    print(f"- Top Mots-cl√©s : {', '.join(resume['top_keywords'][:10])}")

# Point d'entr√©e du script
if __name__ == "__main__":
    main()
